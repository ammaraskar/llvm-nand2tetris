//===-- HackISelDAGToDAG.cpp - A dag to dag inst selector for Hack --------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the Hack target.
//
//===----------------------------------------------------------------------===//

#include "Hack.h"
#include "HackTargetMachine.h"
#include "MCTargetDesc/HackMCTargetDesc.h"

#include "llvm/CodeGen/MachineRegisterInfo.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/raw_ostream.h"

#define DEBUG_TYPE "hack-isel"

namespace llvm {

/// Lowers LLVM IR (in DAG form) to Hack MC instructions (in DAG form).
class HackDAGToDAGISel : public SelectionDAGISel {
public:
  HackDAGToDAGISel(HackTargetMachine &TM, CodeGenOpt::Level OptLevel)
      : SelectionDAGISel(TM, OptLevel) {}

  StringRef getPassName() const override {
    return "Hack DAG->DAG Instruction Selection";
  }

// Include the pieces autogenerated from the target description.
#include "HackGenDAGISel.inc"

private:
  void Select(SDNode *N) override;
};

void HackDAGToDAGISel::Select(SDNode *N) {
  llvm::errs() << "HackDAGToDAGISel::Select\n  ";
  N->dump(CurDAG);

  switch (N->getOpcode()) {
  default: break;
  case ISD::FrameIndex: {
    SDLoc DL(N);

    int frameIndex = cast<FrameIndexSDNode>(N)->getIndex();

    auto addr = CurDAG->getTargetConstant(frameIndex, DL, MVT::i16);
    SDNode *movImmediate = CurDAG->getMachineNode(Hack::AInstr, DL, MVT::i16, addr);

    CurDAG->ReplaceAllUsesWith(N, movImmediate);
    return;
  }
  }

  // Select the default instruction
  SelectCode(N);
}

FunctionPass *createHackISelDag(HackTargetMachine &TM,
                                CodeGenOpt::Level OptLevel) {
  return new HackDAGToDAGISel(TM, OptLevel);
}

} // end of namespace llvm

